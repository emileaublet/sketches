/* eslint-disable @typescript-eslint/no-explicit-any */
import { p5SVG } from "p5.js-svg";

import { Meta } from "../types";

export const meta: Meta = {
  id: "cups-01",
  title: "Cups 01",
  description: "Lots of cups",
  thumbnail: "/cups-01.png",
};

const ROUGHNESS = {
  lineOffset: 3,
  arcOffset: 2,
  scale: 0.02,
  lineSteps: 8,
  arcSteps: 8,
  skipProb: 0.1,
};

// Hex colors for Staedtler pens
const staedtlerPens = [
  "#E0D135",
  "#EB8C2C",
  "#E23415",
  "#B23C32",
  "#F07BAA",
  "#BB4BC2",
  "#47459A",
  "#2172C5",
  "#5BBDE1",
  "#1D5D3C",
  "#7BB333",
  "#646F2C",
  "#B78033",
  "#C1C3B3",
  "#171515",
];

const cups = (p: p5SVG) => {
  p.setup = () => {
    p.createCanvas(700, 850);
    p.background(255);
    p.strokeWeight(0.5);
    p.noFill();
    p.noiseDetail(100, 0.5);

    const cols = 14;
    const rows = 17;
    const cellW = p.width / cols;
    const cellH = p.height / rows;

    for (let row = 0; row < rows; row++) {
      const baseY = (row + 1) * cellH;
      for (let col = 0; col < cols; col++) {
        const cx = col * cellW + cellW / 2;
        const bottomW = p.random(cellW * 0.3, cellW * 0.5);
        const topW = bottomW * p.random(0.85, 1.15);
        const h = p.random(cellH * 0.4, cellH * 0.6);
        const hasBase = p.random() < 0.3;
        const baseH = hasBase ? p.random(cellH * 0.04, cellH * 0.15) : 0;
        const cy = baseY - baseH - h - 10;
        const radii = {
          topLeft: p.random(cellH * 0.02, cellH * 0.04),
          topRight: p.random(cellH * 0.02, cellH * 0.04),
          bottomRight: p.random(cellH * 0.08, cellH * 0.1),
          bottomLeft: p.random(cellH * 0.08, cellH * 0.1),
        };
        const seed = p.random(10000);
        const patterns = [
          "horizontal",
          "vertical",
          "cross",
          "x",
          "wavy",
          "scallop",
          "chevron",
          "polka",
          "brick",
          "herringbone",
          "folk",
        ];
        const pattern = p.random(patterns);

        drawPatternedTrapezoid(cx, cy, topW, bottomW, h, radii, seed, pattern);
        if (p.random() < 0.9) {
          drawHandle(
            cx,
            cy,
            h,
            bottomW,
            p.random() < 0.5 ? "left" : "right",
            seed + 500,
            bottomW < topW * 0.95
          );
        }
        if (hasBase) {
          drawRoughBase(
            cx,
            cy + h,
            bottomW * p.random(0.5, 0.7),
            bottomW * p.random(0.35, 0.63),
            baseH,
            seed
          );
        }
      }
    }
  };

  function drawPatternedTrapezoid(
    x: number,
    y: number,
    topW: number,
    bottomW: number,
    h: number,
    radii: {
      topLeft: number;
      topRight: number;
      bottomRight: number;
      bottomLeft: number;
    },
    seed: number,
    pattern: string
  ) {
    // Compute outline points
    const halfT = topW / 2;
    const halfB = bottomW / 2;
    const tl = p.createVector(x - halfT, y);
    const tr = p.createVector(x + halfT, y);
    const br = p.createVector(x + halfB, y + h);
    const bl = p.createVector(x - halfB, y + h);
    const pts: any[] = [];
    pts.push(
      ...roughLineSegment(
        tl.x + radii.topLeft,
        tl.y,
        tr.x - radii.topRight,
        tr.y,
        seed
      )
    );
    pts.push(
      ...roughArcSegment(
        {
          cx: tr.x - radii.topRight,
          cy: tr.y + radii.topRight,
          a1: -p.HALF_PI,
          a2: 0,
        },
        radii.topRight,
        seed
      )
    );
    pts.push(
      ...roughLineSegment(
        tr.x,
        tr.y + radii.topRight,
        br.x,
        br.y - radii.bottomRight,
        seed
      )
    );
    pts.push(
      ...roughArcSegment(
        {
          cx: br.x - radii.bottomRight,
          cy: br.y - radii.bottomRight,
          a1: 0,
          a2: p.HALF_PI,
        },
        radii.bottomRight,
        seed
      )
    );
    pts.push(
      ...roughLineSegment(
        br.x - radii.bottomRight,
        br.y,
        bl.x + radii.bottomLeft,
        bl.y,
        seed
      )
    );
    pts.push(
      ...roughArcSegment(
        {
          cx: bl.x + radii.bottomLeft,
          cy: bl.y - radii.bottomLeft,
          a1: p.HALF_PI,
          a2: p.PI,
        },
        radii.bottomLeft,
        seed
      )
    );
    pts.push(
      ...roughLineSegment(
        bl.x,
        bl.y - radii.bottomLeft,
        tl.x,
        tl.y + radii.topLeft,
        seed
      )
    );
    pts.push(
      ...roughArcSegment(
        {
          cx: tl.x + radii.topLeft,
          cy: tl.y + radii.topLeft,
          a1: p.PI,
          a2: p.PI + p.HALF_PI,
        },
        radii.topLeft,
        seed
      )
    );

    // Determine stripe bounds
    const ys = pts.map((p) => p.y);
    const xs = pts.map((p) => p.x);
    const yMin = Math.min(...ys);
    const yMax = Math.max(...ys);
    const xMin = Math.min(...xs);
    const xMax = Math.max(...xs);
    const stripeH = p.random((yMax - yMin) / 3, (yMax - yMin) / 2);
    const y1 = yMin + (yMax - yMin - stripeH) / 2;
    const y2 = y1 + stripeH;

    // Clip to trapezoid
    p.push();
    p.noFill();
    p.strokeWeight(0.5);
    p.strokeJoin(p.ROUND);
    p.drawingContext.save();
    p.beginShape();
    pts.forEach((points) => p.vertex(points.x, points.y));
    p.endShape(p.CLOSE);
    p.drawingContext.clip();

    const colsArr = p
      .shuffle(staedtlerPens)
      .slice(0, Math.floor(p.random(2, 4)));

    // Horizontal & Cross (denser)
    if (pattern === "horizontal" || pattern === "cross") {
      let cur = y1;
      let alt = true;
      while (cur <= y2) {
        const gap = alt ? p.random(1, 2) : p.random(2, 4);
        alt = !alt;
        colsArr.forEach((c: any, i: any) => {
          p.stroke(c);
          const yy = cur + p.map(i, 0, colsArr.length - 1, -gap / 2, gap / 2);
          const seg = roughLineSegment(
            xMin,
            yy,
            xMax,
            yy,
            seed + Math.floor(yy * 100)
          );
          p.beginShape();
          seg.forEach((points) => p.vertex(points.x, points.y));
          p.endShape();
        });
        cur += gap;
      }
    }
    // Vertical & Cross (denser)
    else if (pattern === "vertical" || pattern === "cross") {
      let curX = xMin;
      let alt = true;
      while (curX <= xMax) {
        const gap = alt ? p.random(1, 2) : p.random(2, 4);
        alt = !alt;
        colsArr.forEach((c: any, i: number) => {
          p.stroke(c);
          const xx = curX + i * (gap / colsArr.length);
          const seg = roughLineSegment(
            xx,
            y1,
            xx,
            y2,
            seed + Math.floor(xx * 100)
          );
          p.beginShape();
          seg.forEach((points) => p.vertex(points.x, points.y));
          p.endShape();
        });
        curX += gap;
      }
    }
    // Diagonal
    else if (pattern === "diagonal") {
      colsArr.forEach((c: any) => {
        p.stroke(c);
        const dirMode = Math.floor(p.random(3));
        for (let xx = xMin - stripeH; xx <= xMax; xx += stripeH / 4) {
          if (dirMode !== 1) {
            const seg = roughLineSegment(
              xx,
              y1,
              xx + stripeH,
              y2,
              seed + Math.floor(xx * 100)
            );
            p.beginShape();
            seg.forEach((points) => p.vertex(points.x, points.y));
            p.endShape();
          }
          if (dirMode !== 0) {
            const seg = roughLineSegment(
              xx,
              y2,
              xx + stripeH,
              y1,
              seed + Math.floor(xx * 100) + 1
            );
            p.beginShape();
            seg.forEach((points) => p.vertex(points.x, points.y));
            p.endShape();
          }
        }
      });
    }
    // X
    else if (pattern === "x") {
      for (let xx = xMin; xx < xMax; xx += stripeH / 4) {
        const c = p.random(colsArr);
        p.stroke(c);
        const d = 5;
        const p1 = roughLineSegment(xx, y1, xx + d, y1 + d, seed + xx);
        p.beginShape();
        p1.forEach((points) => p.vertex(points.x, points.y));
        p.endShape();
        const p2 = roughLineSegment(xx + d, y1, xx, y1 + d, seed + xx * 2);
        p.beginShape();
        p2.forEach((points) => p.vertex(points.x, points.y));
        p.endShape();
      }
    }
    // Wavy
    else if (pattern === "wavy") {
      const waveCount = Math.floor(p.random(4, 10));
      const steps = Math.ceil((xMax - xMin) / 5);
      for (let w = 0; w < waveCount; w++) {
        const amp = stripeH * p.random(0.05, 0.15);
        const freq = p.random(2, 4);
        const segPts = [];
        for (let i = 0; i <= steps; i++) {
          const t = i / steps;
          const xx = p.lerp(xMin, xMax, t);
          const yy =
            (y1 + y2) / 2 +
            p.sin(t * p.TWO_PI * freq + (w * p.PI) / waveCount) * amp;
          segPts.push(
            p.createVector(
              xx + p.random(-ROUGHNESS.lineOffset, ROUGHNESS.lineOffset),
              yy + p.random(-ROUGHNESS.lineOffset, ROUGHNESS.lineOffset)
            )
          );
        }
        p.stroke(p.random(colsArr));
        p.beginShape();
        segPts.forEach((points) => p.vertex(points.x, points.y));
        p.endShape();
      }
    }
    // Dots
    else if (pattern === "dots") {
      for (let xx = xMin; xx <= xMax; xx += stripeH / 4) {
        for (let k = 0; k < 5; k++) {
          p.stroke(p.random(colsArr));
          p.point(xx + p.random(-2, 2), y1 + p.random(0, stripeH));
        }
      }
    }
    // Scallop
    else if (pattern === "scallop") {
      const rowsC = Math.floor(p.random(1, 5));
      const w = stripeH * 0.3;
      const rArc = stripeH * 0.15;
      for (let ri = 0; ri < rowsC; ri++) {
        const offsetY = (ri - (rowsC - 1) / 2) * (rArc * 1.2);
        const cy0 = y1 + stripeH / 2 + offsetY;
        const count = Math.floor((xMax - xMin) / w);
        for (let i = 0; i < count; i++) {
          const cx0 = xMin + (i + 0.5) * w;
          const arcPts = roughArcSegment(
            { cx: cx0, cy: cy0, a1: p.PI, a2: 0 },
            rArc,
            seed + i * 10,
            12
          );
          p.stroke(p.random(colsArr));
          p.beginShape();
          arcPts.forEach((points) => p.vertex(points.x, points.y));
          p.endShape(p.CLOSE);
        }
      }
    }
    // Chevron
    else if (pattern === "chevron") {
      const w = stripeH * 0.2;
      const count = Math.ceil((xMax - xMin) / w);
      const dy = stripeH * 0.4;
      for (let i = 0; i < count; i++) {
        const x0 = xMin + i * w;
        const y0 = y1 + stripeH / 2 - dy / 2;
        const x1 = x0 + w / 2,
          y1p = y0 + dy,
          x2 = x0 + w;
        const l1 = roughLineSegment(x0, y0, x1, y1p, seed + i * 20);
        const l2 = roughLineSegment(x1, y1p, x2, y0, seed + i * 20 + 1);
        p.stroke(p.random(colsArr));
        p.beginShape();
        l1.forEach((points) => p.vertex(points.x, points.y));
        p.endShape();
        p.stroke(p.random(colsArr));
        p.beginShape();
        l2.forEach((points) => p.vertex(points.x, points.y));
        p.endShape();
      }
    }
    // Polka
    else if (pattern === "polka") {
      const dotSpacing = stripeH * 0.24;
      const colsCount = Math.ceil((xMax - xMin) / dotSpacing);
      const rowsCount = Math.ceil(stripeH / dotSpacing);
      for (let i = 0; i <= colsCount; i++) {
        for (let j = 0; j <= rowsCount; j++) {
          const cx0 =
            xMin +
            i * dotSpacing +
            p.random(-dotSpacing * 0.1, dotSpacing * 0.1);
          const cy0 =
            y1 + j * dotSpacing + p.random(-dotSpacing * 0.1, dotSpacing * 0.1);
          const rDot = p.random(dotSpacing * 0.2, dotSpacing * 0.4);
          const circ = roughArcSegment(
            { cx: cx0, cy: cy0, a1: 0, a2: p.TWO_PI },
            rDot,
            seed + i * (rowsCount + 1) + j,
            12
          );
          p.stroke(p.random(colsArr));
          p.beginShape();
          circ.forEach((points) => p.vertex(points.x, points.y));
          p.endShape(p.CLOSE);
        }
      }
    }
    // Brick
    else if (pattern === "brick") {
      const bw = stripeH * 0.5,
        bh = stripeH * 0.2;
      const rowsC = Math.ceil(stripeH / bh),
        colsC = Math.ceil((xMax - xMin) / bw);
      for (let ry = 0; ry < rowsC; ry++) {
        for (let ci = 0; ci < colsC; ci++) {
          const bx = xMin + ci * bw + ((ry % 2) * bw) / 2;
          const by = y1 + ry * bh;
          const ptsB = [];
          ptsB.push(...roughLineSegment(bx, by, bx + bw, by, seed));
          ptsB.push(
            ...roughLineSegment(bx + bw, by, bx + bw, by + bh, seed + 1)
          );
          ptsB.push(
            ...roughLineSegment(bx + bw, by + bh, bx, by + bh, seed + 2)
          );
          ptsB.push(...roughLineSegment(bx, by + bh, bx, by, seed + 3));
          p.stroke(p.random(colsArr));
          p.beginShape();
          ptsB.forEach((points) => p.vertex(points.x, points.y));
          p.endShape(p.CLOSE);
        }
      }
    }
    // Vine
    else if (pattern === "vine") {
      const steps = Math.ceil((xMax - xMin) / 5);
      let prev = null;
      for (let i = 0; i <= steps; i++) {
        const t = i / steps;
        const xx = p.lerp(xMin, xMax, t);
        const yy = y1 + stripeH / 2 + p.sin(t * p.TWO_PI * 3) * stripeH * 0.1;
        const pt = p.createVector(xx + p.random(-2, 2), yy + p.random(-2, 2));
        if (prev) {
          const seg = roughLineSegment(prev.x, prev.y, pt.x, pt.y, seed + i);
          p.stroke(p.random(colsArr));
          p.beginShape();
          seg.forEach((points) => p.vertex(points.x, points.y));
          p.endShape();
        }
        if (i % Math.floor(steps / 5) === 0) {
          const leaf = roughArcSegment(
            { cx: pt.x, cy: pt.y, a1: p.PI / 4, a2: (5 * p.PI) / 4 },
            stripeH * 0.05,
            seed + i,
            8
          );
          p.stroke(p.random(colsArr));
          p.beginShape();
          leaf.forEach((points) => p.vertex(points.x, points.y));
          p.endShape();
        }
        prev = pt;
      }
    }
    // Herringbone
    else if (pattern === "herringbone") {
      const w = stripeH * 0.3;
      const rowsC = Math.ceil(stripeH / w);
      for (let ry = 0; ry < rowsC; ry++) {
        for (let ci = 0; ci < Math.ceil((xMax - xMin) / (w / 2)); ci++) {
          const x0 = xMin + (ci * w) / 2;
          const y0 = y1 + ry * w;
          const x1 = x0 + w / 2,
            y1p = y0 + w / 2;
          const seg =
            (ci + ry) % 2
              ? roughLineSegment(x0, y0, x1, y1p, seed + ci + ry)
              : roughLineSegment(x1, y0, x0, y1p, seed + ci + ry);
          p.stroke(p.random(colsArr));
          p.beginShape();
          seg.forEach((points) => p.vertex(points.x, points.y));
          p.endShape();
        }
      }
    }
    // Folk
    else if (pattern === "folk") {
      const w = stripeH * 0.4;
      const count = Math.ceil((xMax - xMin) / w);
      for (let i = 0; i < count; i++) {
        const cx0 = xMin + i * w;
        const cy0 = y1 + stripeH / 2;
        const diamond = [
          p.createVector(cx0, cy0 - w * 0.2),
          p.createVector(cx0 + w * 0.2, cy0),
          p.createVector(cx0, cy0 + w * 0.2),
          p.createVector(cx0 - w * 0.2, cy0),
        ];
        p.stroke(p.random(colsArr));
        p.beginShape();
        diamond.forEach((points) => p.vertex(points.x, points.y));
        p.endShape(p.CLOSE);
      }
    }

    p.drawingContext.restore();
    p.pop();

    // Outline
    p.noFill();
    p.stroke(0);
    p.strokeWeight(0.5);
    p.beginShape();
    pts.forEach((pt, i) => {
      if (p.random() > ROUGHNESS.skipProb || i === 0 || i === pts.length - 1) {
        p.vertex(pt.x, pt.y);
      }
    });
    p.endShape(p.CLOSE);
  }

  function drawHandle(
    cx: number,
    cy: number,
    bodyH: number,
    bodyW: number,
    side: string,
    seed: number,
    bottomIsWider = true
  ) {
    const loopW = p.random(bodyW * 0.15, bodyW * 0.25) * p.random(1, 1.25);
    const loopH = p.random(bodyH * 0.3, bodyH * 0.5);
    const offsetY = p.random(bodyH * 0.4, bodyH * 0.6);
    const hCY = cy + offsetY;
    const offsetX = bodyW / 2 + (loopW / 2) * 0.45;
    const hCX = cx + (side === "right" ? offsetX : -offsetX);
    const a1 = side === "left" ? (bottomIsWider ? 1.3 : 1.15) : -1.7;
    const a2 = side === "left" ? (bottomIsWider ? 5.05 : 4.85) : 1.7;
    const handlePts = roughArcSegment(
      { cx: hCX, cy: hCY, a1: a1, a2: a2 },
      1,
      seed,
      30,
      loopW * p.random(0.7, 0.9),
      loopH * p.random(0.2, 0.6)
    );
    p.noFill();
    p.stroke(0);
    p.beginShape();
    handlePts.forEach((points) => p.vertex(points.x, points.y));
    p.endShape();
  }

  function drawRoughBase(
    cx: number,
    yBottom: number,
    topW: number,
    bottomW: number,
    h: number,
    seed: number
  ) {
    const halfTop = topW / 2,
      halfBot = bottomW / 2;
    const pts = [];
    pts.push(
      ...roughLineSegment(
        cx + halfTop,
        yBottom,
        cx + halfBot,
        yBottom + h,
        seed + 1
      )
    );
    pts.push(
      ...roughLineSegment(
        cx + halfBot,
        yBottom + h,
        cx - halfBot,
        yBottom + h,
        seed + 2
      )
    );
    pts.push(
      ...roughLineSegment(
        cx - halfBot,
        yBottom + h,
        cx - halfTop,
        yBottom,
        seed + 3
      )
    );
    p.noFill();
    p.stroke(0);
    p.beginShape();
    pts.forEach((points) => p.vertex(points.x, points.y));
    p.endShape(p.CLOSE);
  }

  function roughLineSegment(
    x1: number,
    y1: number,
    x2: number,
    y2: number,
    seed: number,
    steps = ROUGHNESS.lineSteps
  ) {
    const pts = [];
    for (let i = 0; i <= steps; i++) {
      const t = i / steps;
      const x = p.lerp(x1, x2, t);
      const y = p.lerp(y1, y2, t);
      const oX =
        (p.noise(x * ROUGHNESS.scale, y * ROUGHNESS.scale, seed) - 0.5) *
        ROUGHNESS.lineOffset;
      const oY =
        (p.noise(y * ROUGHNESS.scale, x * ROUGHNESS.scale, seed + 100) - 0.5) *
        ROUGHNESS.lineOffset;
      pts.push(p.createVector(x + oX, y + oY));
    }
    return pts;
  }

  function roughArcSegment(
    { cx, cy, a1, a2 }: { cx: any; cy: any; a1: any; a2: any },
    r: number,
    seed: number,
    steps = ROUGHNESS.arcSteps,
    rx = r,
    ry = r
  ) {
    const pts = [];
    for (let i = 0; i <= steps; i++) {
      const ang = p.lerp(a1, a2, i / steps);
      const x = cx + p.cos(ang) * rx;
      const y = cy + p.sin(ang) * ry;
      const oX =
        (p.noise(x * ROUGHNESS.scale, y * ROUGHNESS.scale, seed + 200) - 0.5) *
        ROUGHNESS.arcOffset;
      const oY =
        (p.noise(y * ROUGHNESS.scale, x * ROUGHNESS.scale, seed + 300) - 0.5) *
        ROUGHNESS.arcOffset;
      pts.push(p.createVector(x + oX, y + oY));
    }
    return pts;
  }
};

export default cups;
